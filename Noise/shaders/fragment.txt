#version 330 core

out vec4 FragColor;

in vec3 v_Normal;
in vec3 v_Tangent;
in vec2 v_TexCoord;
in vec4 FragPos;

struct Material
{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float shininess;
};

struct Light
{
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform Material materials[3];
uniform int materialIndex;
uniform Light light;
uniform vec3 viewPos;

void main()
{
	// ambient
    vec3 ambient = light.ambient * materials[materialIndex].ambient.xyz;
  	
    // diffuse 
    vec3 norm = normalize(v_Normal);
    vec3 lightDir = normalize(light.position - FragPos.xyz);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * materials[materialIndex].diffuse.xyz);
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos.xyz);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), materials[materialIndex].shininess);
    vec3 specular = light.specular * (spec * materials[materialIndex].specular.xyz);  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}